<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_302527_ai_search.SearchUtils</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>SearchUtils</name>
        <script><![CDATA[var SearchUtils = Class.create();
SearchUtils.prototype = {
    initialize: function() {
    },
    searchTable: function(table_name,columns,title_field,description_field,query,q){
        //columns will be a string of sys_ids divided by ','
		query=query+"";
		var glideutils = new GlideUtils();
        var labels = ['sys_id','sys_class_name','short_description','close_notes'];
		var result = [];
		var obj = {};
		var source_limit = gs.getProperty('x_302527_ai_search.source_limit');
        if(columns){
            columns_names = [];
            columns=columns.split(',');
            
            columns.forEach(function(res) {
                var columns_record = new GlideRecord('sys_dictionary');
                columns_record.get(res);
                columns_names.push(columns_record.element);
            });
    
            //split query text into words
            var query_text = q.split(' ');
			
            //get result that contain the query with OR operator in between 
			
            var query_string_or = '';
            var query_string_and = '';
    
			if(query.length>0){
				query_string_or += query.substr(0,(query.length-2));
				query_string_and += query.substr(0,(query.length-2));
			}
				
            for (var i = 0; i < columns_names.length; i++) {
                //append AND operator between colummns
                if( i != 0){
                    query_string_or += '^OR';
                    query_string_and +='^OR';
                }
    
                //build the and query
                if(query_string_and.length==0)
                    query_string_and = columns_names[i]+'LIKE'+q;
                else
                    query_string_and += columns_names[i]+'LIKE'+q;
                
                //build the or query ( or operator put in between every word )
                for (var index = 0; index < query_text.length; index++) {
                    if(query_string_or.length==0)
                        query_string_or = columns_names[i]+'LIKE'+query_text[index];
                    
                    else  {
                        if(index == 0)
                            query_string_or += columns_names[i]+'LIKE'+query_text[index];
                        else
                            query_string_or += '^OR'+columns_names[i]+'LIKE'+query_text[index];
                    } 
                        
                    
                }
                
            }
           
            var rec_arr_and = [];
            var rec_arr_or = [];
            //query by AND 
			
			gs.warn("final  : "+table_name+" or ;" +query_string_or);
			gs.warn("final  : "+table_name+" and ;"+query_string_and);
			
			
            var result_and = new GlideRecord(table_name);
            result_and.addEncodedQuery(query_string_and);
			result_and.setLimit(source_limit);
            result_and.query();
            //for now we return only the short_dscription and the resolution note
            while(result_and.next()){
                obj = glideutils.getFormatedObj(result_and,table_name,q);
				obj.display_title = obj[title_field];
				obj.display_description = obj[description_field];
                obj.u_query_type = 'AND';
                rec_arr_and.push(obj);
            }
    
            //query by OR 
            var result_or = new GlideRecord(table_name);
            result_or.addEncodedQuery(query_string_or);
			result_or.setLimit(source_limit);
            result_or.query();
            
            while(result_or.next()){
                obj = glideutils.getFormatedObj(result_or,table_name,q);
				obj.display_title = obj[title_field];
				obj.display_description = obj[description_field];
                obj.u_query_type = 'OR';
                rec_arr_or.push(obj);
            }
    
            result = rec_arr_and.concat(rec_arr_or.filter(function (item) {
                return rec_arr_and.indexOf(item) < 0;
            }));
            return result;
        }else{
            var query_string = '123TEXTQUERY321='+q;
            var rec  = new GlideRecord(table_name);
            rec.addEncodedQuery(query_string);
            rec.query();
            while(rec.next()){
                obj = glideutils.getFormatedObj(rec,table_name,q);
				obj.display_title = obj[title_field];
				obj.display_description = obj[description_field];
                result.push(obj);
            }
            return result;
        }
        

    },
	searchScript: function(script_id,q){
        var source_limit = gs.getProperty('x_302527_ai_search.source_limit');
		var evaluator = new GlideScopedEvaluator(); 
		evaluator.putVariable('q',q);
		evaluator.putVariable('response',null);
        //get the script source record
        gr = new GlideRecord('x_302527_ai_search_script_source'); 
        gr.get(script_id);
        //log the result script
		evaluator.evaluateScript(gr, 'script', null);
        var list = [];
		list = evaluator.getVariable('response');
		return list.slice(0,source_limit);
        
    },
	searchStatic : function (q) {
		query_string = '';
		q = q.split(' ');
		for(var i = 0;i<q.length;i++){
			if(i == 0)
				query_string = 'u_related_wordsLIKE'+q[i];
			else
				query_string += query_string+'^ORu_related_wordsLIKE'+q[i];
		}
        var result = [];
		var glideutils = new GlideUtils();
        var rec = new GlideRecord('x_302527_ai_search_static_source');
        rec.addEncodedQuery(query_string);
        rec.query();
        while(rec.next()){
			result.push(glideutils.getFormatedObj(rec,'x_302527_ai_search_static_source',q));
        }
        //loop over the urls and return the results

        // responses = [];
        // urls.forEach(function(url){
        //     var request = new sn_ws.RESTMessageV2();
        //     request.setEndpoint(url);
        //     request.setHttpMethod('GET');

        //     request.setRequestHeader("Accept","application/json");

        //     var res = request.execute();
        //     res = res.getBody();
        //     res.url = url;
        //     responses.push(res);
        // });
        // return responses;
		return result;
    },
    searchGoogle : function(q,start){
        var result = {};
        var key = gs.getProperty('x_302527_ai_search.google_key');
        var cx = gs.getProperty('x_302527_ai_search.google_engine_context');
        if(cx && key){
            var request = new sn_ws.RESTMessageV2();
            request.setEndpoint('https://www.googleapis.com/customsearch/v1');
            request.setHttpMethod('GET');
            request.setQueryParameter('key',key);
            request.setQueryParameter('cx',cx);
            request.setQueryParameter('q',q);
			request.setQueryParameter('num',5);
            request.setRequestHeader("Accept","application/json");
			if(start){
				request.setQueryParameter('start',start);
			}
            var response = request.execute();
            response = JSON.parse(response.getBody());
            if(response.hasOwnProperty('error')){
                result.status = 'fail';
                if(response.error.message=='Bad Request')
                    result.message = 'Key is not set or invalid';
                if(response.error.message=='Invalid Value')
                    result.message = 'context is not set or invalid';
            }else{
                result.status = 'success';
                result.response = response ;
            }
            
        }else{
            result.status = 'fail';
            result.message = 'Key or context is not defined. make sure you set them in google search setup module .';
        }
        return result ; 
    },
    type: 'SearchUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-03-15 08:37:48</sys_created_on>
        <sys_id>dbf7698cdb1033004b08a455ca96194a</sys_id>
        <sys_mod_count>115</sys_mod_count>
        <sys_name>SearchUtils</sys_name>
        <sys_package display_value="AI Search" source="x_302527_ai_search">48c25283db0033004b08a455ca961968</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AI Search">48c25283db0033004b08a455ca961968</sys_scope>
        <sys_update_name>sys_script_include_dbf7698cdb1033004b08a455ca96194a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-24 10:36:46</sys_updated_on>
    </sys_script_include>
</record_update>
