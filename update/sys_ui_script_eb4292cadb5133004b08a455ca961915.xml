<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_302527_ai_search.search_macro_client</name>
        <script><![CDATA[var myApp = angular.module('myApp', []);
myApp.controller('AISearch', ['$scope', '$sce', function ($scope, $sce) {
    var item_per_page = 5;
    $scope.table_filtered_by = [];
    $scope.search = function () {
        $scope.loading = true;
        if ($scope.q.length < 5)
            return;
        $scope.q = $scope.q;
        var ga = new GlideAjax('SearchHelper');
        ga.addParam('sysparm_name', 'search');
        ga.addParam('sysparm_q', $scope.q);
        ga.getXMLAnswer(function (res) {
            callback(res);
        });

        function callback(res) {
            $scope.$apply(function () {
                res = JSON.parse(res);
                $scope.g_res = res.google_res;
                $scope.g_res.items.forEach(function (item) {
                    item.htmlTitle = $sce.trustAsHtml(item.htmlTitle);
                    item.htmlSnippet = $sce.trustAsHtml(item.htmlSnippet);
                });
                $scope.g_page = 1;
                $scope.table_filtered_by = res.table_filtered_by;
                $scope.all_results = res.res;
                $scope.calculatePages();
                $scope.sources = [];
                $scope.all_results.forEach(function (item) {
                    //create here a display value short becaus rs is not showing
                    item.display_title = $sce.trustAsHtml(item.display_title);
                    item.display_description = $sce.trustAsHtml(item.display_description);
                    var el = document.createElement('div');
                    el.innerHTML = item.display_description;
                    item.test_length = el.textContent.length > 200;
                    item.display_description_short = $sce.trustAsHtml(trimHtml(item.display_description + '').html);
                    if ($scope.findSource(item.table_name) == -1) {
                        var filteredby = [];
                        //if the table has a filtered by columns append it to sources if not it will not be displayed
                        $scope.table_filtered_by.forEach(function (t) {
                            if (t.table_name == item.sys_class_name) {
                                //remove filters that gives no results 
                                t.filteredby.forEach(function (i) {
                                    if ($scope.testFilters(item.sys_class_name, i.name))
                                        filteredby.push(i);
                                });
                            }
                        });
                        var obj = { name: item.table_name, number: 1, sys_class_name: item.sys_class_name }
                        if (filteredby)
                            obj.filteredby = filteredby;
                        $scope.sources.push(obj);
                    } else {
                        var i = $scope.findSource(item.table_name);
                        $scope.sources[i].number++;

                    }
                });
                $scope.initDyFilters($scope.all_results, $scope.table_filtered_by);
                console.log($scope.DyFilters);
            });

        }
    };

    $scope.showMore = function ($event, item, e) {
        if ($event.target.innerHTML == 'show more') {
            $event.target.innerHTML = 'show less';
            e.rs = item.display_description;
        } else if ($event.target.innerHTML == 'show less') {
            $event.target.innerHTML = 'show more';
            e.rs = item.display_description_short;
        }

    };
    $scope.getPage = function ($event, page, res) {
        $event.preventDefault();
        if (page >= 1 && page <= $scope.num_page) {
            $scope.pagination_check = $scope.page > 5 && $scope.page < $scope.num_page - 4;
            var all = res || $scope.all_results;
            $scope.page = page;
            if ($scope.page == $scope.num_page)
                $scope.results = all.slice(($scope.page - 1) * item_per_page, all.length);
            else
                $scope.results = all.slice(($scope.page - 1) * item_per_page, $scope.page * item_per_page);
        }
        if (document.activeElement.toString() == '[object HTMLButtonElement]') { document.activeElement.blur(); }
    };
    $scope.calculatePages = function (res) {
        var all = res || $scope.all_results;
        if (all.length < 6) {
            $scope.num_page = 1;
            $scope.page = 1;
            $scope.results = all;
        }
        else {
            if (all.length % item_per_page == 0)
                $scope.num_page = all.length / item_per_page;
            else
                $scope.num_page = parseInt(all.length / item_per_page) + 1;
            $scope.page = 1;
            $scope.results = all.slice(0, item_per_page);
        }
        $scope.pagination_check = $scope.page > 5 && $scope.page < $scope.num_page - 4;
    };
    $scope.filterItems = function (source_name, column,value) {
        $scope.table_filtered_by.forEach(function(item){
            if(item.table_name==source_name)
                item.filteredby.forEach(function(f){
                    if(f.label==column)
                        column = f.name;
                });
            });
        $scope.show_google = false;
        if (!source_name) {
            $scope.results = $scope.all_results;
            $scope.filtered = $scope.all_results;
            $scope.calculatePages();
        } else {
            if (column) {
                filtered = [];
                $scope.all_results.forEach(function (item) {
                    if (item.sys_class_name == source_name && $scope.str_contains(item[column + ''], value))
                        filtered.push(item);
                });
                $scope.filtered = filtered;
                $scope.calculatePages(filtered);
            } else {
                filtered = [];
                $scope.all_results.forEach(function (item) {
                    if (item.sys_class_name == source_name)
                        filtered.push(item);
                });
                $scope.filtered = filtered;
                $scope.calculatePages(filtered);
            }
        }
    };
    $scope.initDyFilters = function (all, filter) {
        $scope.DyFilters = [];
        all.forEach(function (item) {
            var filter_obj = {};
            filter.forEach(function (f) {
                if (item.sys_class_name == f.table_name) {
                    f.filteredby.forEach(function (fby) {
                        var filter_index = $scope.findIndex($scope.DyFilters, item.sys_class_name, 'table_name');
                        if (filter_index != -1) {
                            var i = -1;
                            if ($scope.DyFilters[filter_index][fby.label]) {
                                i = $scope.DyFilters[filter_index][fby.label].indexOf(item[fby.name]);
                                if (i == -1)
                                    $scope.DyFilters[filter_index][fby.label].push(item[fby.name]);
                            } else {
                                $scope.DyFilters[filter_index][fby.label] = [];
                                $scope.DyFilters[filter_index][fby.label].push(item[fby.name]);

                            }


                        } else {
                            filter_obj.table_name = item.sys_class_name;
                            filter_obj[fby.label] = [];
                            filter_obj[fby.label].push(item[fby.name]);
                            $scope.DyFilters.push(filter_obj);
                        }

                    })

                }
            });
        });
    };
    $scope.showG_res = function () {
        $scope.show_google = true;
    };
    $scope.next = function ($event) {
        $event.preventDefault();
        if ($scope.g_res.queries.hasOwnProperty('nextPage')) {
            var ga = new GlideAjax('SearchHelper');
            ga.addParam('sysparm_name', 'searchGoogle');
            ga.addParam('sysparm_q', $scope.q);
            ga.addParam('sysparm_google', "next");
            ga.addParam('sysparm_start', $scope.g_res.queries.nextPage[0].startIndex);
            ga.getXMLAnswer(function (res) {
                $scope.$apply(function () {
                    res = JSON.parse(res);
                    $scope.g_res = res;
                    $scope.g_page++;
                    $scope.g_res.items.forEach(function (item) {
                        item.htmlTitle = $sce.trustAsHtml(item.htmlTitle);
                        item.htmlSnippet = $sce.trustAsHtml(item.htmlSnippet);
                    });
                });

            });
        }
        if (document.activeElement.toString() == '[object HTMLButtonElement]') { document.activeElement.blur(); }
    };
    $scope.prev = function ($event) {
        $event.preventDefault();
        if ($scope.g_res.queries.hasOwnProperty('previousPage')) {
            var ga = new GlideAjax('SearchHelper');
            ga.addParam('sysparm_name', 'searchGoogle');
            ga.addParam('sysparm_q', $scope.q);
            ga.addParam('sysparm_google', "previous");
            ga.addParam('sysparm_start', $scope.g_res.queries.previousPage[0].startIndex);
            ga.getXMLAnswer(function (res) {
                $scope.$apply(function () {
                    res = JSON.parse(res);
                    $scope.g_res = res;
                    $scope.g_page--;
                    $scope.g_res.items.forEach(function (item) {
                        item.htmlTitle = $sce.trustAsHtml(item.htmlTitle);
                        item.htmlSnippet = $sce.trustAsHtml(item.htmlSnippet);
                    });
                });
            });

        }
        if (document.activeElement.toString() == '[object HTMLButtonElement]') { document.activeElement.blur(); }
    };
    /*
    *Helper functions
    */
    $scope.testFilters = function (table_name, column) {
        var test = false;
        $scope.all_results.forEach(function (item) {
            if (item.sys_class_name == table_name && $scope.str_contains(item[column + ''], $scope.q))
                test = true;
        });
        return test;
    };
    $scope.range = function (min, max, step) {
        step = step || 1;
        var input = [];
        for (var i = min; i <= max; i += step) input.push(i);
        return input;
    };
    $scope.findSource = function (source_name) {
        for (var index = 0; index < $scope.sources.length; index++) {
            if ($scope.sources[index].name == source_name)
                return index;

        }
        return -1;
    };
    $scope.findIndex = function (table, value, property) {
        for (var index = 0; index < table.length; index++) {
            if (table[index][property] == value)
                return index

        }
        return -1;
    };
    $scope.str_contains = function (str, q) {
        var status = false;
        var t = q.split(' ');
        if (str)
            t.forEach(function (item) {
                if (str.toLowerCase().includes(item.toLowerCase())) {
                    status = true;
                }

            });
        return status;
    };
    $scope.getKeys = function (obj) {
        return Object.keys(obj);
    }
    $scope.getFilterData = function (obj, property) {
        if (property != 'table_name')
            return obj[property];
    }
    function trimHtml(html, options) {

        options = options || {};

        var limit = options.limit || 200,
            preserveTags = (typeof options.preserveTags !== 'undefined') ? options.preserveTags : true,
            wordBreak = (typeof options.wordBreak !== 'undefined') ? options.wordBreak : false,
            suffix = options.suffix || '...',
            moreLink = options.moreLink || '';

        var arr = html.replace(/</g, "\n<")
            .replace(/>/g, ">\n")
            .replace(/\n\n/g, "\n")
            .replace(/^\n/g, "")
            .replace(/\n$/g, "")
            .split("\n");

        var sum = 0,
            row, cut, add,
            tagMatch,
            tagName,
            tagStack = [],
            more = false;

        for (var i = 0; i < arr.length; i++) {

            row = arr[i];
            // count multiple spaces as one character
            rowCut = row.replace(/[ ]+/g, ' ');

            if (!row.length) {
                continue;
            }

            if (row[0] !== "<") {

                if (sum >= limit) {
                    row = "";
                } else if ((sum + rowCut.length) >= limit) {

                    cut = limit - sum;

                    if (row[cut - 1] === ' ') {
                        while (cut) {
                            cut -= 1;
                            if (row[cut - 1] !== ' ') {
                                break;
                            }
                        }
                    } else {

                        add = row.substring(cut).split('').indexOf(' ');

                        // break on halh of word
                        if (!wordBreak) {
                            if (add !== -1) {
                                cut += add;
                            } else {
                                cut = row.length;
                            }
                        }
                    }

                    row = row.substring(0, cut) + suffix;

                    if (moreLink) {
                        row += '<a href="' + moreLink + '" style="display:inline">»</a>';
                    }

                    sum = limit;
                    more = true;
                } else {
                    sum += rowCut.length;
                }
            } else if (!preserveTags) {
                row = '';
            } else if (sum >= limit) {

                tagMatch = row.match(/[a-zA-Z]+/);
                tagName = tagMatch ? tagMatch[0] : '';

                if (tagName) {
                    if (row.substring(0, 2) !== '</') {

                        tagStack.push(tagName);
                        row = '';
                    } else {

                        while (tagStack[tagStack.length - 1] !== tagName && tagStack.length) {
                            tagStack.pop();
                        }

                        if (tagStack.length) {
                            row = '';
                        }

                        tagStack.pop();
                    }
                } else {
                    row = '';
                }
            }

            arr[i] = row;
        }

        return {
            html: arr.join("\n").replace(/\n/g, ""),
            more: more
        };
    }

}
]);]]></script>
        <script_name>search_macro_client</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-10 09:54:44</sys_created_on>
        <sys_id>eb4292cadb5133004b08a455ca961915</sys_id>
        <sys_mod_count>76</sys_mod_count>
        <sys_name>x_302527_ai_search.search_macro_client</sys_name>
        <sys_package display_value="AI Search" source="x_302527_ai_search">48c25283db0033004b08a455ca961968</sys_package>
        <sys_policy/>
        <sys_scope display_value="AI Search">48c25283db0033004b08a455ca961968</sys_scope>
        <sys_update_name>sys_ui_script_eb4292cadb5133004b08a455ca961915</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-21 13:35:01</sys_updated_on>
        <ui_type>10</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
